# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample

import flatbuffers

class Button(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsButton(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Button()
        x.Init(buf, n + offset)
        return x

    # Button
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Button
    def X1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Button
    def Y1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Button
    def X2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Button
    def Y2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Button
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Button
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 1

    # Button
    def ButtonContour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # Button
    def ColorR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Button
    def ColorG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Button
    def ColorB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Button
    def TypeLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ButtonStart(builder): builder.StartObject(11)
def ButtonAddX1(builder, x1): builder.PrependInt32Slot(0, x1, 0)
def ButtonAddY1(builder, y1): builder.PrependInt32Slot(1, y1, 0)
def ButtonAddX2(builder, x2): builder.PrependInt32Slot(2, x2, 0)
def ButtonAddY2(builder, y2): builder.PrependInt32Slot(3, y2, 0)
def ButtonAddLabel(builder, label): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)
def ButtonAddPriority(builder, priority): builder.PrependInt16Slot(5, priority, 1)
def ButtonAddButtonContour(builder, buttonContour): builder.PrependBoolSlot(6, buttonContour, 1)
def ButtonAddColorR(builder, colorR): builder.PrependInt32Slot(7, colorR, 0)
def ButtonAddColorG(builder, colorG): builder.PrependInt32Slot(8, colorG, 0)
def ButtonAddColorB(builder, colorB): builder.PrependInt32Slot(9, colorB, 0)
def ButtonAddTypeLine(builder, typeLine): builder.PrependBoolSlot(10, typeLine, 0)
def ButtonEnd(builder): return builder.EndObject()
